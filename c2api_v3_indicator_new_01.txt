{
 I am not able to make SymbolAttributesProvider work.
 It sometimes fires SymbolAttributesProvider exception.
 So I have to add InstrumentType as an input.
}
using elsystem ;
using elsystem.collections ;
using tsdata.common ;
using tsdata.trading ;
using tsdata.marketdata;
using elsystem.net;


Inputs: int C2SystemId(0), 
        int InstrumentType(13),
        int QuantityMultiplier(1.0);

variables:
    // "A proxy" for input C2SystemId. Used instead of C2SystemId in this indicator. Enables change C2SystemId when debugging.
    int GlobalC2StrategyId(0), 
    // "A proxy" for input InstrumentType. Used instead of InstrumentType in this indicator. Enables change InstrumentType when debugging.
    SecurityType GlobalInstrument(SecurityType.Stock), 
    // I think quantity should be converted on the Collective2 side: if (forex) then divide quantity by 10000
    double GlobalQuantityMultiplier(1.0),

	OrdersProvider OP(NULL), // OrdersProvider for Data1 
	printDebug(true), // switch debug prints on/off
//	SymbolAttributesProvider SAP(NULL), // Does not work reliably
	WebClient DataClient(NULL);

{ ==========================================================
 WebClient.OnUploadStringCompleted callback
 Receives Collective2 API Json response.
 ========================================================== }
method void OnUploadStringCompleted( Object Sender,  UploadStringCompletedEventArgs EventArgs)
vars: 
	string context,
	string dataResults, 
	Object json, 
	Dictionary jsonDictionary, 
	string c2_result;
begin
	dataResults = EventArgs.Result;
	context = EventArgs.UserState.ToString(); // UserState is OrderId for now. Perhaps a full Order object later.

 	print("--------- c2api_SendSignal DataResults ----------" );
 	print(dataResults);

 	json = DataClient.ParseJson(dataResults);
 	jsonDictionary = json astype Dictionary;
 	// Get Colective2 status json item 
 	c2_result = jsonDictionary.Items["ok"] astype string;
    
 	// Test Colective2 status code
    If (c2_result <> "1") then begin
       jsonDictionary = jsonDictionary.Items["error"] astype Dictionary;
       Messagelog("*** ERROR: Send order " + context);
       Messagelog("*** Collective2 error: " + jsonDictionary.Items["title"] astype string + " | " + jsonDictionary.Items["message"] astype string);
    end else begin
       print("Collective2 Signal Id: ",jsonDictionary.Items["signalid"] astype string, ", elapsed time: ",jsonDictionary.Items["elapsed_time"] astype string);
    end;
end;

{ ==========================================================
 Create JSON for Collective2 API "submitSignal"
 ========================================================== }
method string createJsonPayloadInner(
           string orderID,
           OrderAction action, 
           OrderType type,
           string ticker,
           SecurityType secType, 
           int enteredQuantity,
           double limitPrice,
           double stopPrice,
           string duration,
           string comment)
vars: 
		string json, 
		string actionString, 
		string priceType, 
		string profitTargetStr, 
		string stopLossStr,
		string instrument; 
begin
 	actionString = "";
 	Switch (action) begin
  		case OrderAction.Buy: actionString = "BTO"; break;
  		case OrderAction.BuyToCover: actionString = "BTC";break;
  		case OrderAction.Sell: actionString = "STC";break;
  		case OrderAction.SellShort: actionString = "STO";break;
  		default: 
     		Print("***ERROR: Wrong order action: ",NumToStr(action,0)," OrderId: ",orderID);
     		Messagelog("***ERROR: Wrong order action: ",NumToStr(action,0)," OrderId: ",orderID);
 	end;

    // Price type
    priceType = "";
    Switch (type) begin 
    	Case OrderType.Market: priceType = "'market':1"; break;
    	Case OrderType.Limit: priceType = "'limit':" + NumToStr(limitPrice,6); break;
    	Case OrderType.StopMarket: priceType = "'stop':"  + NumToStr(stopPrice,6); break;
    	default: 
     		Print("***ERROR: Wrong order type: ",NumToStr(type,0)," OrderId: ",orderID);
     		Messagelog("***ERROR: Wrong order type: ",NumToStr(type,0)," OrderId: ",orderID);
    end;

    // ProfitTarget, StopLoss
    profitTargetStr = "";
    // if profitTarget > 0.0 then profitTargetStr = "'profittarget':" + NumToStr(profitTarget,6) + ",";

    stopLossStr = "";
    // if stopLoss > 0.0 then stopLossStr = "'stoploss':" + NumToStr(stopLoss,6) + ",";

    // SecurityType 
    instrument = "";
    Switch (secType) begin 
    	Case SecurityType.Forex: instrument = "'forex'"; break;
    	Case SecurityType.Future: instrument = "'future'"; break;
    	Case SecurityType.Stock: instrument = "'stock'"; break;
    	Case SecurityType.StockOption: instrument = "'option'"; break;
    	default: 
     		Print("***ERROR: Wrong SecurityType: ",NumToStr(secType,0)," OrderId: ",orderID);
     		Messagelog("***ERROR: Wrong SecurityType: ",NumToStr(secType,0)," OrderId: ",orderID);
    end;
 
	json = 
        "{" + 
        "'apikey':'" + c2api_key + "'," +
        "'systemid':" + NumToStr(GlobalC2StrategyId,0) + "," +
        "'signal':" + 
         	"{" +
                   "'action':'" + actionString + "'," +
                   "'quant':" + NumToStr(enteredQuantity * GlobalQuantityMultiplier,0) + "," +
                   "'symbol':'" + ticker + "',"  +
                   "'typeofsymbol':" + instrument +  ","  +
                   priceType + "," +
                   profitTargetStr + 
                   stopLossStr +                   
                   "'duration':'" + duration +  "'," +
                   "'comments':'" + comment +  "'," +
                   "'tsorderid':'" + orderID +  "'," +
                   "'sourcecode':'" + c2api_globals(2) +  "'," +
                   "'sourceversion':'" + c2api_globals(1) +  "'" +
            "}" +
       "}";
  print( json);

  return json;
End;


{ ==========================================================
 Create JSON for Collective2 API "submitSignal"
 ========================================================== }
method string createJsonPayload(tsdata.trading.Order tsOrder, SecurityType secType, string comment)
begin
Return createJsonPayloadInner(
           tsOrder.OrderID,
           tsOrder.Action, 
           tsOrder.Type,
           tsOrder.Symbol,
           secType, 
           tsOrder.EnteredQuantity,
           tsOrder.LimitPrice,
           tsOrder.StopPrice,
           tsOrder.Duration,
           comment);
End;

{ ==========================================================
  Order added
 ========================================================== }
method void OrderAdded(tsdata.trading.Order order)
// vars: SecurityType secType; 
begin
	try
	{   This does not work:
		SAP.CloseProvider();
		SAP.Symbol = order.Symbol;
		SAP.LoadProvider();
		
		// Here, sometimes: Exception: tsdata.common.SynchronousDataAccessException !!!
		secType = SAP.SymbolType;
     }		
		
		If (order.Action = OrderAction.Buy) then begin
         	handleBuy(order, GlobalInstrument); 
		end;
		If (order.Action = OrderAction.Sell) then begin
       		handleSell(order, GlobalInstrument);
		end;
	catch (Exception ex)
	   print("*** Exception: OrderAdded: ",ex.ToString());
    end;
end;

{ ==========================================================
   Order removed
 ========================================================== }
method void OrderRemoved(tsdata.trading.Order order)
begin
	print("Order removed: ", order.OrderID," ", order.Symbol);
	print("------ WHAT TO DO HERE ??? -------- ") ;
end;

{ ==========================================================
 Order state changed
 ========================================================== }
method void OrderChanged(tsdata.trading.Order order)
begin
	print("-- Order changed: ID = ",order.OrderID  ) ;
	print(" State: ", order.StateToString(order.State), " OrderStateDetail = " , order.StateDetail.ToString()) ;
	print("------ WHAT TO DO HERE ??? -------- ") ;
end;


{ ==========================================================
  Initiates a long position. 
  Covers a short position & reverses your position.
 ========================================================== }
method void handleBuy(tsdata.trading.Order order, SecurityType secType)
vars: string json,
      int positionQuantity;
begin
	print("handleBuy... Send a sequence of signals to C2 here") ;

   	//  Cover SHORT positions if we are SHORT
   	positionQuantity = GetPositionQuantity(order.Symbol, GetAccountID());
    if (positionQuantity < 0) then begin
            // Prepare JSON
	    	json = createJsonPayloadInner("",OrderAction.BuyToCover,OrderType.Market,order.Symbol,secType, 
                                        	-positionQuantity,0.0,0.0,"DAY","Tradestation Cover");
        	// Send to Collective2
        	DataClient.UploadStringAsync(Uri.Create(c2api_globals(100)),"POST",json,order.OrderID);
    end;        

  // Send BUY	  
  DataClient.UploadStringAsync(Uri.Create(c2api_globals(100)),
                               "POST",
                               createJsonPayload(order, secType, "Tradestation Buy"),
                               order.OrderID);
end;

{ ==========================================================
 Sells a long position.
 ========================================================== }
method void handleSell(tsdata.trading.Order order, SecurityType secType)
begin
  print("handleSell... Send signal to C2 here") ;
 
  DataClient.UploadStringAsync(Uri.Create(c2api_globals(100)),
                               "POST",
                               createJsonPayload(order, secType, "Tradestation Sell"),
                               order.OrderID);
end;


{ =============================================================================
  This is heart of this indicator.
  TradeStation fires this event whenever an order changes.
  We will hadle those changes here.
 =============================================================================}
method void OrdersProvider_Updated( Object sender, OrderUpdatedEventArgs args ) 
begin
	print("OrdersProvider_Updated event - start");
	Try 
	
		if(true) then begin
    		If (args.Reason = OrderUpdateReason.InitialUpdate) then begin
      		// No idea what to do here
      		If (args.Order <> null) then begin
           		// debug("OrdersProvider_Updated : args.OrderID: " + args.OrderID + " args.Order.Symbol: " + args.Order.Symbol);
      		end else begin
           		// debug("OrdersProvider_Updated: args.Order is NULL. C2API indicator probably not fully intialized yet???");  
           		// Why, oh my God why. This indicator is re-initialized by TradeStation after this??
      		end;
    		end
    		else begin
				if strlen(args.OrderID) > 0 then begin	
					switch ( args.Reason )begin
						// case OrderUpdateReason.InitialUpdate: debug("OrderUpdateReason.InitialUpdate"); break;
						case OrderUpdateReason.added: OrderAdded( args.Order); break;
						case OrderUpdateReason.removed: OrderRemoved(args.Order); break;
						case OrderUpdateReason.statechanged: OrderChanged( args.Order); break;
						default: Messagelog("*** ERROR: Application error in OrdersProvider_Updated");
 					end;
				end else begin
					Messagelog("OrderID is EMPTY. You need to format the strategy and allow 'Automate execution'.");
				end;
			end;	
		end;
	Catch (Exception ex)
		print("*** Exception: ", ex.ToString());
	End;
	
	print("OrdersProvider_Updated event - end");
end;

	    

{
  Indicator initialization
}
once 
	begin
		GlobalC2StrategyId = C2SystemId; 
		GlobalC2StrategyId = 30076808; // Debug: Bob Svan test system
		
		GlobalQuantityMultiplier = QuantityMultiplier; 
		GlobalQuantityMultiplier = 0.00001; // debug
		GlobalInstrument = InstrumentType;
		GlobalInstrument = SecurityType.Forex; // debug
		
		OP = new OrdersProvider() ;
	    OP.Updated += OrdersProvider_Updated;
		OP.Realtime = true ;
//		OP.States += "cancelpending, partiallyfilled, received, sending, sent, queued";
		OP.States += "canceled, filled, partiallyfilled, sent, expired";
		OP.Load = true ;
{
        Well, SymbolAttributesProvider throws exceptions when used in methods then
		SAP = new SymbolAttributesProvider(); 
		SAP.Symbol = "MSFT";
		SAP.Realtime = true;
		SAP.LoadProvider();
		print("=============================== SAP LOADED");
}
        DataClient = new WebClient ;
        DataClient.UploadStringCompleted += OnUploadStringCompleted ;

		print("============= c2api_v3 initialized =============");		
		print("OP.Symbols.Count: ", OP.Symbols.Count);
		print("OP.Accounts: ", OP.Accounts.Count);
		print("OP.States: ", OP.States.Count);
		print("OP.Load : ", OP.Load );
		print("OP.Realtime: ", OP.Realtime);
		print("OP.Count: ", OP.Count);
		
end;
	
	